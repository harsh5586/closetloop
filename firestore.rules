rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(chatData) {
      return request.auth.uid in chatData.participants;
    }

    function isRentalParticipant(rentalData) {
      return request.auth.uid == rentalData.userId || request.auth.uid == rentalData.ownerId;
    }

    function isPurchaseParticipant(purchaseData) {
      return request.auth.uid == purchaseData.userId || request.auth.uid == purchaseData.ownerId;
    }

    // Allow anyone to read listings
    match /listings/{listingId} {
      allow read: if true;
      allow create, update: if request.auth != null 
        && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // Allow public read access to user profiles (for item details pages)
    // but only authenticated users can write their own data
    match /users/{userId} {
      allow read: if true; // Allow public read access
      allow write: if isAuthenticated() && isOwner(userId);
      
      // Allow users to read and write their own wishlist
      match /wishlist/{listingId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Allow users to create and manage rental requests
    match /rentals/{rentalId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.ownerId == request.auth.uid
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Allow users to create and manage purchase requests
    match /purchases/{purchaseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.ownerId == request.auth.uid
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Allow users to read and update requests (rentals/purchases)
    match /requests/{requestId} {
      allow read: if request.auth != null
        && (resource.data.userId == request.auth.uid || resource.data.ownerId == request.auth.uid);
      allow update: if request.auth != null
        && resource.data.ownerId == request.auth.uid;
    }

    // Allow users to read and create notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null; // Allow any authenticated user to create notifications
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Optimized chat rules
    match /chats/{chatId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
      }
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 